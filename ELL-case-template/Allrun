#!/bin/bash

#------------------------------------------------------------------------------
# OpenFOAM Mesh Conversion, Simulation, and Post-processing Script
# Version: 1.1
# Supports optional parallel execution via argument: ./Allrun [serial|parallel]
#------------------------------------------------------------------------------

# Detect parallel option
RUN_MODE=${1:-serial}  # Default to serial if no argument is provided
# Get the name of the current directory (case name)
fname=$(basename "$PWD")
echo "[INFO] Case name detected: $fname"
echo "[INFO] Run mode: $RUN_MODE"

# Set number of processors for parallel execution
NP=12

# ------------------------------------------------------------------------------
# Mesh Conversion
# ------------------------------------------------------------------------------

echo "[INFO] Converting mesh file to OpenFOAM format"
msh_file="constant/triSurface/${fname}.msh"
gmshToFoam "$msh_file" | tee log.gmshToFoam

# ------------------------------------------------------------------------------
# Update Boundary Conditions
# ------------------------------------------------------------------------------

echo "[INFO] Updating boundary conditions"
python3 ../../updateBoundaryConditions.py

# ------------------------------------------------------------------------------
# Mesh Validation
# ------------------------------------------------------------------------------

echo "[INFO] Checking mesh"
checkMesh | tee log.checkMesh

# ------------------------------------------------------------------------------
# Create foam.foam File
# ------------------------------------------------------------------------------

echo "[INFO] Creating foam.foam file"
touch "${fname}.foam"

# ------------------------------------------------------------------------------
# Run Simulation
# ------------------------------------------------------------------------------

if [ "$RUN_MODE" = "parallel" ] && [ "$NP" -gt 1 ]; then
  # Only decompose if >1
  if [ ! -d "processor0" ]; then
    decomposePar | tee log.decomposePar
  fi

  echo "[INFO] Running simpleFoam in parallel on $NP cores"
  mpirun --use-hwthread-cpus -np $NP simpleFoam -parallel | tee log.simpleFoam

  echo "[INFO] Reconstructing results"
  reconstructPar | tee log.reconstructPar

elif [ "$RUN_MODE" = "parallel" ] && [ "$NP" -eq 1 ]; then
  # Requested parallel, but NP=1
  echo "[WARN] Parallel requested but NP=1; running serial instead"
  simpleFoam | tee log.simpleFoam

else
  echo "[INFO] Running simpleFoam in serial"
  simpleFoam | tee log.simpleFoam
fi

# NP = 8
# decomposePar | tee log.decomposePar
# echo "[INFO] Running simpleFoam in parallel on 8 cores"
# mpirun --use-hwthread-cpus -np 8 simpleFoam -parallel | tee log.simpleFoam

# ------------------------------------------------------------------------------
# Post-processing
# ------------------------------------------------------------------------------

echo "[INFO] Running post-processing"
postProcess -func "patchIntegrate(name=outlet,U)"
postProcess -func "patchAverage(name=inlet,p)"
postProcess -func "patchAverage(name=outlet,p)"


# ------------------------------------------------------------------------------
# End of script
# ------------------------------------------------------------------------------

