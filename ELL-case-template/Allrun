#!/bin/bash

# ==============================================================================
# OpenFOAM Simulation Launcher
# Supports serial and parallel execution with core control
# Usage: ./Allrun [serial|parallel] [N_CORES]
# ==============================================================================

# ------------------------------------------------------------------------------
# 1. Configuration & Input Handling
# ------------------------------------------------------------------------------

RUN_MODE=${1:-serial}       # Default to serial if no argument is passed
NP=${2:-12}                 # Default to 12 processors if none provided
CASE_NAME=$(basename "$PWD")

echo "[INFO] Case detected: $CASE_NAME"
echo "[INFO] Run mode: $RUN_MODE"

if [[ "$RUN_MODE" == "parallel" ]]; then
    echo "[INFO] Number of processors requested: $NP"
fi

# Validate core count if running in parallel
if [[ "$RUN_MODE" == "parallel" && "$NP" -le 1 ]]; then
    echo "[ERROR] Cannot run in parallel with $NP processor(s). Use at least 2."
    exit 1
fi

# ------------------------------------------------------------------------------
# 2. Mesh Conversion
# ------------------------------------------------------------------------------

echo "[INFO] Converting GMSH mesh to OpenFOAM format"
msh_file="constant/triSurface/${CASE_NAME}.msh"
gmshToFoam "$msh_file" | tee log.gmshToFoam

# ------------------------------------------------------------------------------
# 3. Boundary Condition Update
# ------------------------------------------------------------------------------

echo "[INFO] Updating boundary conditions using custom Python script"
python3 ../../updateBoundaryConditions.py

# ------------------------------------------------------------------------------
# 4. Mesh Check
# ------------------------------------------------------------------------------

echo "[INFO] Checking mesh quality"
checkMesh | tee log.checkMesh

# ------------------------------------------------------------------------------
# 5. Create foam.foam for GUI (optional)
# ------------------------------------------------------------------------------

touch "${CASE_NAME}.foam"
echo "[INFO] ${CASE_NAME}.foam file created for post-processing"

# ------------------------------------------------------------------------------
# 6. Run Simulation
# ------------------------------------------------------------------------------

if [[ "$RUN_MODE" == "parallel" ]]; then
    echo "[INFO] Setting up for parallel run on $NP cores"

    # Dynamically update numberOfSubdomains in decomposeParDict
    if grep -q "numberOfSubdomains" system/decomposeParDict; then # Check if entry exists
        sed -i "s/^\(numberOfSubdomains\s*\).*;/\1$NP;/" system/decomposeParDict  # Update value
        echo "[INFO] Updated numberOfSubdomains in decomposeParDict" 
    else # Entry not found
        echo "[ERROR] Entry 'numberOfSubdomains' not found in decomposeParDict" 
        exit 1
    fi

    # Decompose only if processor0 directory does not exist
    if [[ ! -d "processor0" ]]; then
        echo "[INFO] Decomposing domain"
        decomposePar | tee log.decomposePar
    fi

    echo "[INFO] Running simulation in parallel"
    mpirun --use-hwthread-cpus -np $NP simpleFoam -parallel | tee log.simpleFoam

    echo "[INFO] Reconstructing decomposed fields"
    reconstructPar | tee log.reconstructPar

else
    echo "[INFO] Running simulation in serial"
    simpleFoam -postProcess | tee log.simpleFoam
fi

# ------------------------------------------------------------------------------
# 7. Optional Post-Processing (Uncomment as Needed)
# ------------------------------------------------------------------------------

# echo "[INFO] Calculating outlet mass flow"
# postProcess -func "patchIntegrate(name=outlet,U)"

# echo "[INFO] Averaging pressure at inlet/outlet"
# postProcess -func "patchAverage(name=inlet,p)"
# postProcess -func "patchAverage(name=outlet,p)"

# ------------------------------------------------------------------------------
# End of Script
# ------------------------------------------------------------------------------

echo "[INFO] Simulation complete."
