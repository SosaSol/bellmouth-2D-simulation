#!/bin/bash

#------------------------------------------------------------------------------
# OpenFOAM Mesh Conversion, Simulation, and Post-processing Script
# Version: 1.1
# Supports optional parallel execution via argument: ./Allrun [serial|parallel]
#------------------------------------------------------------------------------

# Detect parallel option
RUN_MODE=${1:-serial}  # Default to serial if no argument is provided
# Use all cores except 4 for system processes
NP=$(nproc --ignore 4)

# Get the name of the current directory (case name)
fname=$(basename "$PWD")
echo "[INFO] Case name detected: $fname"
echo "[INFO] Run mode: $RUN_MODE"

# ------------------------------------------------------------------------------
# Mesh Conversion
# ------------------------------------------------------------------------------

echo "[INFO] Converting mesh file to OpenFOAM format"
msh_file="constant/triSurface/${fname}.msh"
gmshToFoam "$msh_file" | tee log.gmshToFoam

# ------------------------------------------------------------------------------
# Update Boundary Conditions
# ------------------------------------------------------------------------------

echo "[INFO] Updating boundary conditions"
python3 ../../updateBoundaryConditions.py

# ------------------------------------------------------------------------------
# Mesh Validation
# ------------------------------------------------------------------------------

echo "[INFO] Checking mesh"
checkMesh | tee log.checkMesh

# ------------------------------------------------------------------------------
# Create foam.foam File
# ------------------------------------------------------------------------------

echo "[INFO] Creating foam.foam file"
touch "${fname}.foam"

# ------------------------------------------------------------------------------
# Run Simulation
# ------------------------------------------------------------------------------

if [ "$RUN_MODE" = "parallel" ]; then

    # Check if decomposition already exists (e.g., processor0 folder)
    if [ ! -d "processor0" ]; then
        echo "[INFO] Setting numberOfSubdomains to $NP"
        sed -i "s/numberOfSubdomains.*/numberOfSubdomains $NP;/" system/decomposeParDict
        echo "[INFO] Decomposing domain for parallel execution"
        decomposePar | tee log.decomposePar
    else
        echo "[INFO] Domain already decomposed. Skipping decomposePar."
    fi

    echo "[INFO] Running simpleFoam in parallel on $NP cores"
    mpirun -np $NP simpleFoam -parallel | tee log.simpleFoam

    echo "[INFO] Reconstructing results from processors"
    reconstructPar | tee log.reconstructPar
else
    echo "[INFO] Running simpleFoam in serial"
    simpleFoam | tee log.simpleFoam
fi

# ------------------------------------------------------------------------------
# Post-processing
# ------------------------------------------------------------------------------

echo "[INFO] Running post-processing"
postProcess -func "patchIntegrate(name=outlet,U)"
postProcess -func "patchAverage(name=inlet,p)"
postProcess -func "patchAverage(name=outlet,p)"

# ------------------------------------------------------------------------------
# End of script
# ------------------------------------------------------------------------------

